// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mdmtspv_ga
List mdmtspv_ga(arma::mat xy, arma::mat dmat, arma::mat depots, int nSalesmen, int CostType, int popSize, int numIter, double Epsilon, bool return_all);
RcppExport SEXP _mtsp_mdmtspv_ga(SEXP xySEXP, SEXP dmatSEXP, SEXP depotsSEXP, SEXP nSalesmenSEXP, SEXP CostTypeSEXP, SEXP popSizeSEXP, SEXP numIterSEXP, SEXP EpsilonSEXP, SEXP return_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type depots(depotsSEXP);
    Rcpp::traits::input_parameter< int >::type nSalesmen(nSalesmenSEXP);
    Rcpp::traits::input_parameter< int >::type CostType(CostTypeSEXP);
    Rcpp::traits::input_parameter< int >::type popSize(popSizeSEXP);
    Rcpp::traits::input_parameter< int >::type numIter(numIterSEXP);
    Rcpp::traits::input_parameter< double >::type Epsilon(EpsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type return_all(return_allSEXP);
    rcpp_result_gen = Rcpp::wrap(mdmtspv_ga(xy, dmat, depots, nSalesmen, CostType, popSize, numIter, Epsilon, return_all));
    return rcpp_result_gen;
END_RCPP
}
// mdmtspv_ga2
List mdmtspv_ga2(arma::mat xy, arma::mat dmat, int nSalesmen, int CostType, int popSize, int numIter, double Epsilon, bool return_all);
RcppExport SEXP _mtsp_mdmtspv_ga2(SEXP xySEXP, SEXP dmatSEXP, SEXP nSalesmenSEXP, SEXP CostTypeSEXP, SEXP popSizeSEXP, SEXP numIterSEXP, SEXP EpsilonSEXP, SEXP return_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type nSalesmen(nSalesmenSEXP);
    Rcpp::traits::input_parameter< int >::type CostType(CostTypeSEXP);
    Rcpp::traits::input_parameter< int >::type popSize(popSizeSEXP);
    Rcpp::traits::input_parameter< int >::type numIter(numIterSEXP);
    Rcpp::traits::input_parameter< double >::type Epsilon(EpsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type return_all(return_allSEXP);
    rcpp_result_gen = Rcpp::wrap(mdmtspv_ga2(xy, dmat, nSalesmen, CostType, popSize, numIter, Epsilon, return_all));
    return rcpp_result_gen;
END_RCPP
}
// mtsp_ga
List mtsp_ga(arma::mat xy, arma::mat dmat, int nSalesmen, int minTour, int CostType, int popSize, int numIter, double Epsilon, bool return_all);
RcppExport SEXP _mtsp_mtsp_ga(SEXP xySEXP, SEXP dmatSEXP, SEXP nSalesmenSEXP, SEXP minTourSEXP, SEXP CostTypeSEXP, SEXP popSizeSEXP, SEXP numIterSEXP, SEXP EpsilonSEXP, SEXP return_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type nSalesmen(nSalesmenSEXP);
    Rcpp::traits::input_parameter< int >::type minTour(minTourSEXP);
    Rcpp::traits::input_parameter< int >::type CostType(CostTypeSEXP);
    Rcpp::traits::input_parameter< int >::type popSize(popSizeSEXP);
    Rcpp::traits::input_parameter< int >::type numIter(numIterSEXP);
    Rcpp::traits::input_parameter< double >::type Epsilon(EpsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type return_all(return_allSEXP);
    rcpp_result_gen = Rcpp::wrap(mtsp_ga(xy, dmat, nSalesmen, minTour, CostType, popSize, numIter, Epsilon, return_all));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mtsp_mdmtspv_ga", (DL_FUNC) &_mtsp_mdmtspv_ga, 9},
    {"_mtsp_mdmtspv_ga2", (DL_FUNC) &_mtsp_mdmtspv_ga2, 8},
    {"_mtsp_mtsp_ga", (DL_FUNC) &_mtsp_mtsp_ga, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_mtsp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
